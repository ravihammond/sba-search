FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    apt-utils \
    build-essential \
    bzip2 \
    ca-certificates \
    cmake \
    curl \
    ffmpeg \
    git \
    imagemagick \
    libomp5 \
    libopenmpi-dev \
    libx11-6\
    iputils-ping \
    net-tools \
    p7zip-full \
    p7zip-rar \
    sudo \
    vim \
    wget \
    zip

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV CONDA_AUTO_UPDATE_CONDA=false
ENV PATH /opt/conda/bin:$PATH

ARG CONDA_VERSION=py37_4.10.3

ARG CONDA_INSTALL_PREFIX=/opt/conda

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-aarch64.sh"; \
    elif [ "${UNAME_M}" = "ppc64le" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-ppc64le.sh"; \
    fi && \
    wget "${MINICONDA_URL}" -O miniconda.sh -q && \
    mkdir -p /opt && \
    sh miniconda.sh -b -p ${CONDA_INSTALL_PREFIX} && \
    rm miniconda.sh && \
    ln -s ${CONDA_INSTALL_PREFIX}/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". ${CONDA_INSTALL_PREFIX}/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find ${CONDA_INSTALL_PREFIX}/ -follow -type f -name '*.a' -delete && \
    find ${CONDA_INSTALL_PREFIX}/ -follow -type f -name '*.js.map' -delete && \
    ${CONDA_INSTALL_PREFIX}/bin/conda clean -afy


COPY environments/conda_environment.yml /
RUN conda env update --file /conda_environment.yml --prune

ARG CONDA_PREFIX=${CONDA_INSTALL_PREFIX}
RUN [ ! -z "${CONDA_PREFIX}" ] || { echo "CONDA_PREFIX not set"; exit 1; }
ENV CPATH=${CONDA_PREFIX}/include:${CPATH}
ENV LIBRARY_PATH=${CONDA_PREFIX}/lib:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}
# Avoid tensor operation using all cpu cores.
ENV OMP_NUM_THREADS=1

RUN pip install \
    torch==1.10.2+cu113 \
    torchvision==0.11.3+cu113 \
    torchaudio==0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html \
    psutil==5.8.0

RUN conda install -c conda-forge \
    google-clou$HOME/.config/gcloud/application_default_credentials.jsond-storage


